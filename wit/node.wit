// WasmFlow Node Interface
// This defines the contract that all WasmFlow components must implement

package wasmflow:node@1.1.0;

/// Data types supported by WasmFlow
interface types {
    /// Data type specification for ports
    variant data-type {
        u32-type,
        i32-type,
        f32-type,
        string-type,
        bool-type,
        binary-type,
        list-type,
        any-type,
    }

    /// Values that flow through node connections
    variant value {
        u32-val(u32),
        i32-val(s32),
        f32-val(f32),
        string-val(string),
        bool-val(bool),
        binary-val(list<u8>),
        list-val(list<value>),
    }

    /// Port specification
    record port-spec {
        name: string,
        data-type: data-type,
        optional: bool,
        description: string,
    }

    /// Component metadata
    record component-info {
        name: string,
        version: string,
        description: string,
        author: string,
        category: option<string>,
    }

    /// Execution error
    record execution-error {
        message: string,
        input-name: option<string>,
        recovery-hint: option<string>,
    }
}

/// Host functions provided by WasmFlow
interface host {
    /// Log a message to the console
    log: func(level: string, message: string);

    /// Get temporary directory path
    get-temp-dir: func() -> result<string, string>;
}

/// Metadata interface - provides component information
interface metadata {
    use types.{component-info, port-spec};

    /// Get component information
    get-info: func() -> component-info;

    /// Get input port specifications
    get-inputs: func() -> list<port-spec>;

    /// Get output port specifications
    get-outputs: func() -> list<port-spec>;

    /// Get required capabilities
    get-capabilities: func() -> option<list<string>>;
}

/// Execution interface - performs the actual computation
interface execution {
    use types.{value, execution-error};

    /// Execute the component with given inputs
    execute: func(inputs: list<tuple<string, value>>) -> result<list<tuple<string, value>>, execution-error>;
}

/// UI interface - provides custom UI rendering (optional)
interface ui {
    use types.{value};

    /// UI element types for declarative footer rendering
    /// Note: Horizontal/Vertical layouts use separate record types to avoid recursion
    variant ui-element {
        /// Simple text label
        label(string),
        /// Colored text with RGB color
        colored-label(colored-text),
        /// Key-value pair in a grid
        key-value(key-value-pair),
        /// Horizontal layout container
        horizontal(horizontal-layout),
        /// Vertical layout container
        vertical(vertical-layout),
        /// Separator line
        separator,
    }

    /// Horizontal layout of UI elements
    record horizontal-layout {
        elements: list<ui-element-item>,
    }

    /// Vertical layout of UI elements
    record vertical-layout {
        elements: list<ui-element-item>,
    }

    /// UI element item (non-recursive version for layouts)
    variant ui-element-item {
        /// Simple text label
        label(string),
        /// Colored text with RGB color
        colored-label(colored-text),
        /// Key-value pair in a grid
        key-value(key-value-pair),
        /// Separator line
        separator,
    }

    /// Colored text specification
    record colored-text {
        text: string,
        r: u8,
        g: u8,
        b: u8,
    }

    /// Key-value pair for grid display
    record key-value-pair {
        key: string,
        value: string,
    }

    /// Footer view data
    record footer-view {
        elements: list<ui-element>,
    }

    /// Get custom footer view for this component
    /// Returns None if component doesn't provide a custom view
    /// Returns Some(footer-view) with declarative UI elements to render
    get-footer-view: func(outputs: list<tuple<string, value>>) -> option<footer-view>;
}

/// Main world that components must implement
world component {
    import host;
    export metadata;
    export execution;
}

/// Extended world with optional UI support
world component-with-ui {
    import host;
    export metadata;
    export execution;
    export ui;
}
