//! {{COMPONENT_NAME}} - User-Defined HTTP-Enabled WasmFlow Component
//!
//! {{DESCRIPTION}}
//! Generated by WASM Component Creator with network capabilities

// Generate bindings from WIT files with HTTP support
wit_bindgen::generate!({
    path: "wit",
    world: "component",
    with: {
        "wasi:io/error@0.2.0": generate,
        "wasi:io/poll@0.2.0": generate,
        "wasi:io/streams@0.2.0": generate,
        "wasi:http/types@0.2.0": generate,
        "wasi:http/outgoing-handler@0.2.0": generate,
    },
});

use exports::wasmflow::node::metadata::Guest as MetadataGuest;
use exports::wasmflow::node::execution::Guest as ExecutionGuest;
use wasmflow::node::types::*;
use wasmflow::node::host;

// WASI HTTP imports (available for user code)
use wasi::http::types::{Fields, Method, OutgoingRequest, RequestOptions, Scheme, ErrorCode};
use wasi::http::outgoing_handler;
use wasi::io::streams::StreamError;

struct Component;

// Implement the metadata interface
impl MetadataGuest for Component {
    fn get_info() -> ComponentInfo {
        ComponentInfo {
            name: "{{COMPONENT_NAME}}".to_string(),
            version: "0.1.0".to_string(),
            description: "{{DESCRIPTION}}".to_string(),
            author: "User".to_string(),
            category: Some("{{CATEGORY}}".to_string()),
        }
    }

    fn get_inputs() -> Vec<PortSpec> {
        vec![{{INPUTS}}]
    }

    fn get_outputs() -> Vec<PortSpec> {
        vec![{{OUTPUTS}}]
    }

    fn get_capabilities() -> Option<Vec<String>> {
        {{CAPABILITIES}}
    }
}

// Implement the execution interface
impl ExecutionGuest for Component {
    fn execute(inputs: Vec<(String, Value)>) -> Result<Vec<(String, Value)>, ExecutionError> {
        host::log("info", "{{COMPONENT_NAME}} executing");

        {{INPUT_EXTRACTION}}

        // User code begins here (with HTTP capabilities available)
        {{USER_CODE}}
        // User code ends here

        {{OUTPUT_CONSTRUCTION}}
    }
}

export!(Component);
